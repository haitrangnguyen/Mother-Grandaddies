Script started on Tue 14 May 2019 04:22:08 PM PDT

]0;cs1c@cs1c-VirtualBox ~/vector[01;32mcs1c@cs1c-VirtualBox[00m [01;34m~/vector $[00m ls -l

total 16

-rw-rw-r-- 1 cs1c cs1c  199 May  8 21:08 Makefile

-rw-rw-r-- 1 cs1c cs1c  337 May 14 16:20 test.cpp

-rw-rw-r-- 1 cs1c cs1c 4308 May 14 16:19 vector.h

-rw-rw-r-- 1 cs1c cs1c    0 May 14 16:22 vector.scr

]0;cs1c@cs1c-VirtualBox ~/vector[01;32mcs1c@cs1c-VirtualBox[00m [01;34m~/vector $[00m make all

g++ -std=c++14 -Wall -g test.cpp -o vector

]0;cs1c@cs1c-VirtualBox ~/vector[01;32mcs1c@cs1c-VirtualBox[00m [01;34m~/vector $[00m ls -l

total 56

-rw-rw-r-- 1 cs1c cs1c   199 May  8 21:08 Makefile

-rw-rw-r-- 1 cs1c cs1c   337 May 14 16:20 test.cpp

-rwxrwxr-x 1 cs1c cs1c 37504 May 14 16:22 [0m[01;32mvector[0m

-rw-rw-r-- 1 cs1c cs1c  4308 May 14 16:19 vector.h

-rw-rw-r-- 1 cs1c cs1c     0 May 14 16:22 vector.scr

]0;cs1c@cs1c-VirtualBox ~/vector[01;32mcs1c@cs1c-VirtualBox[00m [01;34m~/vector $[00m valgrind --leak-check=yes ./vector

==2717== Memcheck, a memory error detector

==2717== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.

==2717== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info

==2717== Command: ./vector

==2717== 

==2717== Invalid write of size 4

==2717==    at 0x400BCA: main (test.cpp:11)

==2717==  Address 0x0 is not stack'd, malloc'd or (recently) free'd

==2717== 

==2717== 

==2717== Process terminating with default action of signal 11 (SIGSEGV)

==2717==  Access not within mapped region at address 0x0

==2717==    at 0x400BCA: main (test.cpp:11)

==2717==  If you believe this happened as a result of a stack

==2717==  overflow in your program's main thread (unlikely but

==2717==  possible), you can try to increase the size of the

==2717==  main thread stack using the --main-stacksize= flag.

==2717==  The main thread stack size used in this run was 8388608.

==2717== 

==2717== HEAP SUMMARY:

==2717==     in use at exit: 72,748 bytes in 3 blocks

==2717==   total heap usage: 3 allocs, 0 frees, 72,748 bytes allocated

==2717== 

==2717== LEAK SUMMARY:

==2717==    definitely lost: 0 bytes in 0 blocks

==2717==    indirectly lost: 0 bytes in 0 blocks

==2717==      possibly lost: 0 bytes in 0 blocks

==2717==    still reachable: 72,748 bytes in 3 blocks

==2717==         suppressed: 0 bytes in 0 blocks

==2717== Reachable blocks (those to which a pointer was found) are not shown.

==2717== To see them, rerun with: --leak-check=full --show-leak-kinds=all

==2717== 

==2717== For counts of detected and suppressed errors, rerun with: -v

==2717== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

Segmentation fault

]0;cs1c@cs1c-VirtualBox ~/vector[01;32mcs1c@cs1c-VirtualBox[00m [01;34m~/vector $[00m exit

exit



Script done on Tue 14 May 2019 04:24:04 PM PDT

